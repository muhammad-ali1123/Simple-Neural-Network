## This version of the code was extracted from a Jupyter notebook into a .py file. Parts of the code were cleaned up to provide clarity and readability. 

import math
import random
import numpy as np
import matplotlib.pyplot as plt
from graphviz import Digraph

class Value:
    def __init__(self, data, _children=(), _op='', label=''):
        self.data = data
        self.grad = 0.0
        self._backward = lambda: None
        self._prev = set(_children) 
        self._op = _op
        self.label = label
        
    def __repr__(self):  
        return f"Value(data={self.data})"
        
    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')
        def _backward():
            self.grad += 1.0 * out.grad
            other.grad += 1.0 * out.grad
        out._backward = _backward    
        
        return out
        
    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward            
        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += other * (self.data ** (other - 1)) * out.grad
        out._backward = _backward

        return out 
        
    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __neg__(self): #-self
        return self * -1

    def __sub__(self, other): # self - other
        return self + (-other)
        

    def tanh(self):
        x = self.data
        t = (math.exp(2*x) - 1)/(math.exp(2*x) + 1)
        out = Value(t, (self, ), 'tanh')

        def _backward():
            self.grad += (1 - t**2) * out.grad
        out._backward = _backward            
  
        return out

    def exp(self):
        x = self.data
        out = Value(math.exp(x), (self, ), 'exp')

        def _backward():
            self.grad += out.data * out.grad 
        out._backward = _backward
        
        return out

    def backward(self):
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        self.grad = 1.0
        for node in reversed(topo):
            node._backward()

# Test basic operations
a = Value(2.0)
b = Value(4.0)
print("Basic subtraction test:", a - b)

def trace(root):
    """Builds a set of all nodes and edges in a graph"""
    nodes, edges = set(), set()
    def build(v): 
        if v not in nodes:
            nodes.add(v)
            for child in v._prev:
                edges.add((child, v))
                build(child)
    build(root)
    return nodes, edges

def draw_dot(root):
    """Creates a visualization of the computational graph"""
    dot = Digraph(format='svg', graph_attr={'rankdir': 'LR'}) # LR = left to right 

    nodes, edges = trace(root)
    for n in nodes:
        uid = str(id(n))
        # for any value in graph, create a rectangular ('record') node for it
        dot.node(name=uid, label="{ %s | data %.4f | grad %.4f }" % (n.label, n.data, n.grad), shape='record')
        if n._op: 
            # if this value is a result of some operation, create an op node for it
            dot.node(name=uid + n._op, label=n._op)
            # and connect this node to it
            dot.edge(uid + n._op, uid)

    for n1, n2 in edges:
        # connect n1 to the op node of n2 
        dot.edge(str(id(n1)), str(id(n2)) + n2._op) 

    return dot

# Example 1: Simple neuron computation with tanh activation
print("\n=== Example 1: Simple Neuron ===")
x1 = Value(2.0, label='x1')
x2 = Value(0.0, label='x2')
w1 = Value(-3.0, label='w1')
w2 = Value(1.0, label='w2')
b = Value(6.8813735870195432, label='b')

# Forward pass: x1*w1 + x2*w2 + b 
x1w1 = x1*w1; x1w1.label = 'x1*w1'
x2w2 = x2*w2; x2w2.label = 'x2*w2'
x1w1x2w2 = x1w1 + x2w2; x1w1x2w2.label = 'x1*w1 + x2*w2'
n = x1w1x2w2 + b; n.label = 'n'
o = n.tanh(); o.label = 'o'

# Backward pass
o.backward()
print(f"Output: {o.data}")

# Example 2: Manual tanh implementation using exp
print("\n=== Example 2: Manual tanh implementation ===")
x1 = Value(2.0, label='x1')
x2 = Value(0.0, label='x2')
w1 = Value(-3.0, label='w1')
w2 = Value(1.0, label='w2')
b = Value(6.8813735870195432, label='b')

x1w1 = x1*w1; x1w1.label = 'x1*w1'
x2w2 = x2*w2; x2w2.label = 'x2*w2'
x1w1x2w2 = x1w1 + x2w2; x1w1x2w2.label = 'x1*w1 + x2*w2'
n = x1w1x2w2 + b; n.label = 'n'

# Manual tanh: (e^(2x) - 1) / (e^(2x) + 1)
e = (2*n).exp()
o = (e - 1) / (e + 1) 
o.label = 'o'

o.backward()
print(f"Manual tanh output: {o.data}")

# PyTorch comparison
print("\n=== PyTorch Comparison ===")
try:
    import torch
    
    x1_torch = torch.Tensor([2.0]).double(); x1_torch.requires_grad = True
    x2_torch = torch.Tensor([0.0]).double(); x2_torch.requires_grad = True
    w1_torch = torch.Tensor([-3.0]).double(); w1_torch.requires_grad = True
    w2_torch = torch.Tensor([1.0]).double(); w2_torch.requires_grad = True
    b_torch = torch.Tensor([6.8813735870195432]).double(); b_torch.requires_grad = True
    
    n_torch = x1_torch*w1_torch + x2_torch*w2_torch + b_torch
    o_torch = torch.tanh(n_torch)
    
    print(f"PyTorch output: {o_torch.data.item()}")
    
    o_torch.backward()
    
    print("Gradients comparison:")
    print(f"x1 - Micrograd: {x1.grad:.6f}, PyTorch: {x1_torch.grad.item():.6f}")
    print(f"w1 - Micrograd: {w1.grad:.6f}, PyTorch: {w1_torch.grad.item():.6f}")
    
except ImportError:
    print("PyTorch not available for comparison")

# Neural Network Classes
class Neuron: 
    def __init__(self, nin):
        """Initialize neuron with random weights and bias"""
        self.w = [Value(random.uniform(-1,1)) for _ in range(nin)]
        self.b = Value(random.uniform(-1,1))

    def __call__(self, x):
        """Forward pass through neuron"""
        act = sum((wi * xi for wi, xi in zip(self.w, x)), self.b)
        out = act.tanh()
        return out

    def parameters(self):
        """Return all parameters (weights + bias)"""
        return self.w + [self.b]
        

class Layer: 
    def __init__(self, nin, nout):
        """Initialize layer with nout neurons, each with nin inputs"""
        self.neurons = [Neuron(nin) for _ in range(nout)]

    def __call__(self, x):
        """Forward pass through layer"""
        outs = [n(x) for n in self.neurons]
        return outs[0] if len(outs) == 1 else outs

    def parameters(self):
        """Return all parameters from all neurons"""
        return [p for neuron in self.neurons for p in neuron.parameters()]
        

class MLP:
    def __init__(self, nin, nouts):
        """
        Initialize Multi-Layer Perceptron
        nin: number of inputs
        nouts: list of layer sizes [hidden1, hidden2, ..., output]
        """
        sz = [nin] + nouts
        self.layers = [Layer(sz[i], sz[i+1]) for i in range(len(nouts))]

    def __call__(self, x):
        """Forward pass through entire network"""
        for layer in self.layers:
            x = layer(x)
        return x

    def parameters(self):
        """Return all parameters from all layers"""
        return [p for layer in self.layers for p in layer.parameters()]

# Neural Network Training Example
print("\n=== Neural Network Training ===")

# Create network: 3 inputs -> 4 hidden -> 4 hidden -> 1 output
x = [2.0, 3.0, -1.0]
n = MLP(3, [4, 4, 1])
print(f"Network architecture: 3 -> 4 -> 4 -> 1")
print(f"Total parameters: {len(n.parameters())}")
print(f"Single prediction: {n(x)}")

# Training data
xs = [
    [2.0, 3.0, -1.0],
    [3.0, -1.0, 0.5],
    [0.5, 1.0, 1.0],
    [1.0, 1.0, -1.0], 
]
ys = [1.0, -1.0, -1.0, 1.0]  # desired targets

print(f"\nTraining on {len(xs)} samples...")

# Training loop
for k in range(20):
    # Forward pass
    ypred = [n(x) for x in xs]
    loss = sum(((yout - ygt)**2 for ygt, yout in zip(ys, ypred)), Value(0))

    # Zero gradients
    for p in n.parameters():
        p.grad = 0.0
    
    # Backward pass
    loss.backward()

    # Update parameters (gradient descent)
    for p in n.parameters():
        p.data += -0.1 * p.grad

    print(f"Epoch {k}: Loss = {loss.data:.6f}")

print("\nTraining completed!")
print(f"Final predictions: {[n(x).data for x in xs]}")
print(f"Target values: {ys}")

# Test the trained network
print("\n=== Final Network Performance ===")
for i, (x, y) in enumerate(zip(xs, ys)):
    pred = n(x).data
    print(f"Sample {i+1}: Input {x} -> Prediction {pred:.4f}, Target {y}")
